// <auto-generated />
using System;
using CNS.ZOOM360.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CNS.ZOOM360.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ZOOM360DbContext))]
    [Migration("20201229172834_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CNS.ZOOM360.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DOJ")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("emplyee");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.AllExtract.AllExtractListModel", b =>
                {
                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<int>("ColsCountExtract")
                        .HasColumnType("int")
                        .HasColumnName("COLS_COUNT_EXTRACT");

                    b.Property<double>("DataSizeExtract")
                        .HasColumnType("float")
                        .HasColumnName("DATA_SIZE_EXTRACT");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("RowsCountExtract")
                        .HasColumnType("int")
                        .HasColumnName("ROWS_COUNT_EXTRACT");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVER_INSERT_TIME");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_ACCOUNT_ID");

                    b.Property<string>("StatusExtract")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_EXTRACT");

                    b.Property<string>("UserNameInsert")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_NAME_INSERT");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.Property<string>("sourceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCE_NAME");

                    b.ToTable("AllExtractListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.AllExtract.AllIssuesModel", b =>
                {
                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<string>("ConnectorDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTOR_DISPLAY_NAME");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVER_INSERT_DATE");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_ACCOUNT_ID");

                    b.Property<string>("connectionName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTON_NAME");

                    b.Property<string>("daysAgo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DAYS_AGO");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FILE_NAME");

                    b.Property<string>("hoursAgo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HOURS_AGO");

                    b.Property<string>("messageType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE_TYPE");

                    b.Property<string>("message_1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE_1");

                    b.Property<string>("statusAck")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_ACK");

                    b.ToTable("AllIssuesModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.AllExtract.ConnectionListModel", b =>
                {
                    b.Property<string>("Accessgranted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_GRANTED");

                    b.Property<string>("AccountDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_DISPLAY_NAME");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<string>("ConnectorName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTOR_NAME");

                    b.Property<string>("DestinationEnabled")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_ENABLED");

                    b.Property<int>("SourceConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_ACCOUNT_ID");

                    b.Property<int>("SourceConnectorId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_CONNECTOR_ID");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.ToTable("ConnectionListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.AllExtract.SourceListModel", b =>
                {
                    b.Property<string>("AccessGranted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_GRANTED");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BSTATUS");

                    b.Property<string>("ConnectionName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTION_NAME");

                    b.Property<string>("ConnectorTypeName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTOR_TYPE_NAME");

                    b.Property<string>("DestinationEnabled")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_ENABLED");

                    b.Property<string>("NextRun")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NEXT_RUN");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVER_INSERT_DATE");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_ACCOUNT_ID");

                    b.Property<int>("SourceConnectorId")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_CONNECTOR_ID");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCE_NAME");

                    b.Property<string>("UserNameInsert")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_NAME_INSERT");

                    b.Property<string>("WorkSpaceDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_DISPLAY_NAME");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.ToTable("SourceListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.CalenderSetup.CalenderSetupModel", b =>
                {
                    b.Property<string>("AnnualCampaignCalender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnualHolidayCalender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BussinessYearDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalenderApplyAndEnforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalenderSetup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinacialYearDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MilestoneAnnualHolidayCalender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotifyCampaignsCalender")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyMilestoneCalender")
                        .HasColumnType("bit");

                    b.Property<string>("ReportingYearDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekStartDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("CalenderSetupModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.ChangeLog.ChangeLogListModel", b =>
                {
                    b.Property<string>("AccessGranted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_GRANTED");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_ID");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_NAME");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("DestinationPrimery")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_PRIMARY");

                    b.Property<string>("DetinationPassive")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_PASSIVE");

                    b.Property<string>("QuotaSize")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QUOTA_SIZE");

                    b.Property<string>("QuotaType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QUOTA_TYPE");

                    b.Property<string>("QuotaUsed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QUOTA_USED");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STORAGE_URL");

                    b.Property<string>("WorkspaceId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_ID");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.Property<string>("WorkspaceParentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_PARENT_NAME");

                    b.ToTable("ChangeLogListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.ChildWorkspaces", b =>
                {
                    b.Property<bool>("ChildChange")
                        .HasColumnType("bit");

                    b.Property<bool>("ChildOverrideSelectedOption")
                        .HasColumnType("bit");

                    b.Property<bool>("ChildSelectedOption")
                        .HasColumnType("bit");

                    b.Property<string>("ChildWorkspace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("AllExtractListModels");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Common.DropdownList", b =>
                {
                    b.Property<string>("DropdownText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_TEXT");

                    b.Property<string>("DropdownValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_VALUE");

                    b.ToTable("DropdownList");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Common.TreeDropDownChildModel", b =>
                {
                    b.Property<string>("DropdownText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_TEXT");

                    b.Property<string>("DropdownValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_VALUE");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit")
                        .HasColumnName("SELECTED");

                    b.ToTable("TreeDropDownChildModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Common.TreeDropDownParentModel", b =>
                {
                    b.Property<string>("DropdownText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_TEXT");

                    b.Property<int>("DropdownValue")
                        .HasColumnType("int")
                        .HasColumnName("DROPDOWN_VALUE");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit")
                        .HasColumnName("SELECTED");

                    b.ToTable("TreeDropDownParentModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Common.UAMDropdownListModel", b =>
                {
                    b.Property<string>("DropdownText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_TEXT");

                    b.Property<string>("DropdownValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DROPDOWN_VALUE");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit")
                        .HasColumnName("SELECTED");

                    b.ToTable("UAMDropdownListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.ConnectionStatus.ConnectionLogModel", b =>
                {
                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<string>("ConfiguredAccounts")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONFIGURED_ACCOUNTS");

                    b.Property<string>("LastAccessed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_ACCESSED");

                    b.Property<string>("connectiontype")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTION_TYPE");

                    b.Property<string>("firstcreated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_CREATED");

                    b.Property<int>("totalextract")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_EXTRACTS");

                    b.ToTable("ConnectionLogModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Connectors.Databases.SQL.EntityObjectFieldsList", b =>
                {
                    b.Property<string>("AGGREGATION_STATUS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AGGREGATION_STATUS");

                    b.Property<string>("DISPLAY_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("ISKEY_STATUS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ISKEY_STATUS");

                    b.Property<int>("OBJECT_FIELD_ID")
                        .HasColumnType("int")
                        .HasColumnName("OBJECT_FIELD_ID");

                    b.Property<string>("OBJECT_FIELD_IMAGE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_FIELD_IMAGE");

                    b.Property<string>("OBJECT_FIELD_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_FIELD_NAME");

                    b.Property<string>("OBJECT_FIELD_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_FIELD_TYPE");

                    b.Property<string>("VISIBILITY_STATUS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VISIBILITY_STATUS");

                    b.ToTable("EntityObjectFieldsList");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Connectors.Databases.SQL.GEtSourceObjectList", b =>
                {
                    b.Property<string>("DISPLAY_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<int>("OBJECT_ID")
                        .HasColumnType("int")
                        .HasColumnName("OBJECT_ID");

                    b.Property<string>("OBJECT_IMAGE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_IMAGE");

                    b.Property<string>("OBJECT_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_NAME");

                    b.Property<string>("OBJECT_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_TYPE");

                    b.Property<string>("OBJECT_VISIBILITY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_VISIBILITY");

                    b.Property<string>("SERVER_INSERT_DATE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVER_INSERT_DATE");

                    b.ToTable("GEtSourceObjectList");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Connectors.Databases.SQL.SourceObjectModel", b =>
                {
                    b.Property<bool>("AccessGrant")
                        .HasColumnType("bit");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSpaceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SourceObjectModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Connectors.Databases.SQL.UpdateConnectorListStep2", b =>
                {
                    b.Property<string>("BStatusforvarification")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BSTATUS");

                    b.Property<string>("Emailid")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL_ID");

                    b.Property<string>("Fieldvalue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIELD_VALUE");

                    b.Property<string>("Filedname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIELD_NAME");

                    b.Property<string>("StatusnotifyGrant")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status_notify_grant");

                    b.Property<string>("accountdisplayname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_DISPLAY_NAME");

                    b.Property<string>("authorizationgrant")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AUTHORIZATION_GRANT");

                    b.Property<string>("enableconnection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ENABLED_CONNECTION");

                    b.ToTable("UpdateConnectorListStep2");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Connectors.Databases.SQL.UpdateSourceObjectGridModel", b =>
                {
                    b.Property<string>("DISPLAY_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<int>("OBJECT_ID")
                        .HasColumnType("int")
                        .HasColumnName("OBJECT_ID");

                    b.Property<string>("OBJECT_IMAGE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_IMAGE");

                    b.Property<string>("OBJECT_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_NAME");

                    b.Property<string>("OBJECT_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_TYPE");

                    b.Property<string>("OBJECT_VISIBILITY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_VISIBILITY");

                    b.Property<string>("SERVER_INSERT_DATE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_ACCESSED");

                    b.ToTable("UpdateSourceObjectGridModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.CurrencySetup.CurrencySetupModel", b =>
                {
                    b.Property<string>("CLIENT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currenceyTypeSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyApplyAndEnforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("currencyCollectedData")
                        .HasColumnType("bit");

                    b.Property<bool>("currencyConversion")
                        .HasColumnType("bit");

                    b.Property<string>("currencyImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("currencyPrepareData")
                        .HasColumnType("bit");

                    b.Property<bool>("currencyPresentingData")
                        .HasColumnType("bit");

                    b.Property<string>("currencyReportHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyVisulization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("exchangeRateAndDataConversion")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workSpaceId")
                        .HasColumnType("int");

                    b.ToTable("CurrencySetupModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.DataGovernance.DataGovernanceModel", b =>
                {
                    b.Property<string>("CLIENT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("activeDestinationLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("activeSourceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("childWorkspaceInheritance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataCollectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataStorage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("destinationRetentionDays")
                        .HasColumnType("int");

                    b.Property<string>("destinationWorkspace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outOffApiShareData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("outOffAppWebShareData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("overrideDataSnapshot")
                        .HasColumnType("bit");

                    b.Property<bool>("overrideDataStorage")
                        .HasColumnType("bit");

                    b.Property<string>("passiveDestinationLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rawDataStagging")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("schemaMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("staggingRetentionDays")
                        .HasColumnType("int");

                    b.Property<string>("staggingStorageLocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("workspaceShareData")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DataGovernanceModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.DisplaySettings.DisplaySettingsModel", b =>
                {
                    b.Property<string>("Client_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorPallete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("WorkspaceDisplayMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceTheme")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DisplaySettingsModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.DynamicMenu.MainMenuModel", b =>
                {
                    b.Property<string>("MainManuId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MAIN_MENU_ID");

                    b.Property<string>("MainMenuName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MAIN_MENU_NAME");

                    b.Property<string>("ModeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MODE_ID");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.ToTable("MainMenuModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.DynamicMenu.SubMenuSectionItemsModel", b =>
                {
                    b.Property<string>("subMenuId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUB_MENU_ID");

                    b.Property<string>("subMenuName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUB_MENU_NAME");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.ToTable("SubMenuSectionItemsModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.DynamicMenu.SubMenusectionModel", b =>
                {
                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MENU_ID");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MENU_NAME");

                    b.ToTable("SubMenusectionModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.GridAndGraphData.GraphDataModel", b =>
                {
                    b.Property<long>("CTR")
                        .HasColumnType("bigint")
                        .HasColumnName("CTR");

                    b.Property<long>("Clicks")
                        .HasColumnType("bigint")
                        .HasColumnName("CLICKS");

                    b.Property<string>("Connectorimage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTOR_IMAGE");

                    b.Property<long>("Imperssions")
                        .HasColumnType("bigint")
                        .HasColumnName("IMPRESSIONS");

                    b.Property<long>("Period_Date")
                        .HasColumnType("bigint")
                        .HasColumnName("PERIOD_DATE");

                    b.Property<string>("Period_Display_Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERIOD_DISPLAY_DATE");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PLATFORM");

                    b.ToTable("GraphDataModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.GridAndGraphData.GridDataModel", b =>
                {
                    b.Property<string>("InvoiceTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INVOICE_TIME");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("COUNTRY");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("invoiceDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INVOICE_DATE");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INVOICE_NO");

                    b.Property<string>("stockCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STOCK_CODE");

                    b.Property<string>("unitPrice")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UNIT_PRICE");

                    b.ToTable("GridDataModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.IdentityAccessManagment.AccessLockingModel", b =>
                {
                    b.Property<string>("AppearanceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedAttempt")
                        .HasColumnType("int");

                    b.Property<int>("FailedTimeInterval")
                        .HasColumnType("int");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnlockAdministrator")
                        .HasColumnType("bit");

                    b.Property<string>("UnlockOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnlockSupervisor")
                        .HasColumnType("bit");

                    b.Property<string>("UnlockTimeInterval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserLocked")
                        .HasColumnType("bit");

                    b.Property<string>("UsernameInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("AccessLockingModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.IdentityAccessManagment.IdentityControlModel", b =>
                {
                    b.Property<string>("AppearanceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApprovalEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovalQRCode")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovalSuperVisor")
                        .HasColumnType("bit");

                    b.Property<string>("AvailableFormats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefinedFormats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginActivation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LoginAuthentication")
                        .HasColumnType("bit");

                    b.Property<string>("LoginCaseSensitive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MandtoryField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSLCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SSOAuthentication")
                        .HasColumnType("bit");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UniqueMandtoryField")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("IdentityControlModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.IdentityAccessManagment.MultiFactorAuthenticationModel", b =>
                {
                    b.Property<string>("AppearanceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CTFirsttimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("CTPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CryptographicTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FIFirsttimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("FIPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<string>("FaceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PAFirsttimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("PAPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<string>("PasscodeAuthentication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PasscodeEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("PasscodeSMS")
                        .HasColumnType("bit");

                    b.Property<bool>("PasscodeSinglepart")
                        .HasColumnType("bit");

                    b.Property<bool>("PasscodeTwopart")
                        .HasColumnType("bit");

                    b.Property<int>("PasscodeValidityAttempts")
                        .HasColumnType("int");

                    b.Property<int>("PasscodeValidityTime")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("QRFirsttimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("QRPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SAFirsttimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("SAPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<bool>("SQFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("SQPasswordUpdation")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityQestionAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityQestionOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisoryApproval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("MultiFactorAuthenticationModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.IdentityAccessManagment.PasswordControlSetupModel", b =>
                {
                    b.Property<string>("AppearanceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstLoginDays")
                        .HasColumnType("int");

                    b.Property<bool>("FirstLoginOption")
                        .HasColumnType("bit");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastPasswordChanged")
                        .HasColumnType("int");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("NotifySupervisorPasswordExpiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotifySupervisorPasswordExpiryDays")
                        .HasColumnType("int");

                    b.Property<string>("NotifyUserPasswordExpiry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotifyUserPasswordExpiryDays")
                        .HasColumnType("int");

                    b.Property<string>("PasswordExpired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrongPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserCreatedDays")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("PasswordControlSetupModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.IdentityAccessManagment.RiskBaseAuthenticationModel", b =>
                {
                    b.Property<string>("AppearanceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConnectionTypeAccess")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionTypeVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeviceTypeAcces")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceTypeVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTimeVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IPAccess")
                        .HasColumnType("bit");

                    b.Property<string>("IPSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MacAccess")
                        .HasColumnType("bit");

                    b.Property<string>("MacVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBAAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBAActivation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerInsertTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUpdateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTimeVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupervisorAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisorSummary")
                        .HasColumnType("bit");

                    b.Property<string>("SupervisorVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TimeSlotAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("TimeZoneAccess")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZoneVerification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserRiskSummary")
                        .HasColumnType("bit");

                    b.Property<string>("UsernameInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.ToTable("RiskBaseAuthenticationModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Load.DestinationList", b =>
                {
                    b.Property<string>("accessGranted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_GRANTED");

                    b.Property<string>("accountDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_DISPLAY_NAME");

                    b.Property<int>("accountID")
                        .HasColumnType("int")
                        .HasColumnName("DES_ACCOUNT_ID");

                    b.Property<string>("appearanceLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APPEARANCE_LOGO");

                    b.Property<int>("connectorID")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_CONNECTOR_ID");

                    b.Property<string>("connectorName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONNECTOR_NAME");

                    b.Property<string>("destinationEnable")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_ENABLED");

                    b.Property<string>("workspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.ToTable("DestinationList");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.NumeralSetup.NumeralSetupModel", b =>
                {
                    b.Property<string>("Client_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FullDecimalPlaces")
                        .HasColumnType("bit");

                    b.Property<string>("NegitiveNumberColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberApplyAndEnforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberConversion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberSignType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberValueConversion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberingSystemFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositiveNumbeColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoundOffNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectiveDecimalPlaces")
                        .HasColumnType("int");

                    b.Property<int>("SelectiveRoundOffPlace")
                        .HasColumnType("int");

                    b.Property<string>("SignFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnType("int");

                    b.ToTable("NumeralSetupModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Prepare.DataQualityModel", b =>
                {
                    b.Property<string>("displayname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FUNCTION_DISPLAY_NAME");

                    b.Property<string>("enable")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ENABLED");

                    b.Property<string>("functiondetail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FUNCTION_DETAILS");

                    b.Property<string>("functiongroup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FUNCTION_GROUP");

                    b.ToTable("DataQualityModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Prepare.LookupListModel", b =>
                {
                    b.Property<string>("accountdispalyname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_DISPLAY_NAME");

                    b.Property<int>("connecrtorid")
                        .HasColumnType("int")
                        .HasColumnName("CONNECTOR_ID");

                    b.Property<string>("datainsertionoption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DATA_OPTIONS");

                    b.Property<string>("destinationfieldselection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_FIELD_SELECTION");

                    b.Property<string>("destinationfieldvalue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESTINATION_FIELD_VALUE");

                    b.Property<string>("enableconnection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ENABLED");

                    b.Property<string>("loadstatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOAD_STATUS");

                    b.Property<string>("lookupdisplayname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOOKUP_DISPLAY_NAME");

                    b.Property<string>("lookupfield")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOOKUP_FIELDS");

                    b.Property<int>("lookupid")
                        .HasColumnType("int")
                        .HasColumnName("LOOKUP_ID");

                    b.Property<int>("sourceaccountid")
                        .HasColumnType("int")
                        .HasColumnName("SOURCE_ACCOUNT_ID");

                    b.Property<string>("sourcefieldselection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCE_FIELD_SELECTION");

                    b.Property<string>("sourcefieldvalue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCE_FIELD_VALUE");

                    b.Property<string>("tablename")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TABLE_NAME");

                    b.Property<string>("visibiltyconnection")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VISIBILTY");

                    b.Property<string>("workspacename")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.ToTable("LookupListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Prepare.ObjectListModelForLookupInsert", b =>
                {
                    b.Property<int>("objectfieldid")
                        .HasColumnType("int")
                        .HasColumnName("OBJECT_FIELD_ID");

                    b.Property<string>("objectfieldname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_FIELD_NAME");

                    b.ToTable("ObjectListModelForLookupInsert");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Prepare.SourceTableListModel", b =>
                {
                    b.Property<string>("displayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("objectName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBJECT_NAME");

                    b.ToTable("SourceTableListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.QuotaSettings.QuotaSettingsModel", b =>
                {
                    b.Property<string>("Client_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotaEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotaLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotaStartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotaUsageCycle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnType("int");

                    b.ToTable("QuotaSettingsModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.SourceEdit.FieldMappingRuleTemplateModel", b =>
                {
                    b.Property<string>("aggregationStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AGGREGATION_STATUS");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("keyColumn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KEY_COLUMN");

                    b.Property<string>("sourceColumn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOURCE_COLUMN");

                    b.Property<string>("targetColumn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TARGET_COLUMN");

                    b.Property<string>("visibilityStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VISIBILITY_STATUS");

                    b.ToTable("FieldMappingRuleTemplateModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.SourceEdit.SaveSourceFieldMappingRuleTemplateModel", b =>
                {
                    b.Property<string>("aggregationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("connectorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("keyColumn")
                        .HasColumnType("bit");

                    b.Property<string>("sourceColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("targetColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("templateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("visibilityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("workspaceId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SaveSourceFieldMappingRuleTemplateModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.UserAccessManagment.SaveUserAccessManagementModel", b =>
                {
                    b.Property<bool>("AccessNotification")
                        .HasColumnType("bit");

                    b.Property<string>("ChildWorkspace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataOperaion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultDisplaymode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flex9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewsLetter")
                        .HasColumnType("bit");

                    b.Property<string>("OldPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OverwriteExisting")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistarionAccessMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetriveRecent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetypeNewPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperVisorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupervisorMode")
                        .HasColumnType("bit");

                    b.Property<bool>("SystemNotification")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("Useractive")
                        .HasColumnType("bit");

                    b.Property<string>("Workspace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SaveUserAccessManagementModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.UserAccessManagment.UserListModel", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL_ADDRESS");

                    b.Property<string>("LastActivity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_ACTIVITY");

                    b.Property<string>("LastStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_STATUS");

                    b.Property<string>("SubUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUB_USER_ID");

                    b.Property<bool>("UserActive")
                        .HasColumnType("bit")
                        .HasColumnName("USER_ACTIVE");

                    b.Property<string>("Workspaces")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.ToTable("UserListModel");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Workspace.WorkspaceSetup", b =>
                {
                    b.Property<string>("CLIENT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildWorkSpaceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Exclude_Child_WorkSpace")
                        .HasColumnType("bit");

                    b.Property<string>("WorkSpaceDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSpaceParentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSpace_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workSpaceId")
                        .HasColumnType("int");

                    b.ToTable("workspaceSpModal");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.StoreProcedures.Workspace.WorkspaceSetupList", b =>
                {
                    b.Property<string>("ChildApplyandEnforce")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CHILD_APPLY_AND_ENFORCE");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<string>("ExcludeChildWorkspace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EXCLUDE_CHILD_WORKSPACE");

                    b.Property<string>("ParentWorkspace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PARENT_WORKSPACE");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int")
                        .HasColumnName("WORKSPACE_ID");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WORKSPACE_NAME");

                    b.Property<string>("bStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BSTATUS");

                    b.ToTable("WorkspaceSetupList");
                });

            modelBuilder.Entity("CNS.ZOOM360.Entities.TimeZoneSetup.TimeZoneSetupModel", b =>
                {
                    b.Property<string>("ApplyAndEnforceDatetime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Client_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClockImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataFormatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DateCollectedData")
                        .HasColumnType("bit");

                    b.Property<bool>("DateConversion")
                        .HasColumnType("bit");

                    b.Property<bool>("DateConversionValue")
                        .HasColumnType("bit");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormatReports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormatVisulization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DatePreparingData")
                        .HasColumnType("bit");

                    b.Property<bool>("DatePresentingData")
                        .HasColumnType("bit");

                    b.Property<string>("ReportTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportsDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeFormatReports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeFormatVisualization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisualizationTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisulizationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnType("int");

                    b.ToTable("TimeZoneSetupModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ee1c5685-3f6e-4653-ae38-a9889929a5c1",
                            ConcurrencyStamp = "27aec9fc-07c8-4d24-a1f4-6f3d29e85148",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b6a6e4f5-5374-4795-b195-770cbd7e68ab",
                            ConcurrencyStamp = "1d53820f-fa74-4b92-b25f-f1b6af5fa836",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6fa778b1-5e74-4d72-8810-8f50f81921b7",
                            ConcurrencyStamp = "c6735236-2b10-4ac0-afd4-4a5482eeb1b1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CNS.ZOOM360.Entities.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CNS.ZOOM360.Entities.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CNS.ZOOM360.Entities.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CNS.ZOOM360.Entities.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
